---
# KubeMedic Pod OOM Example with Test Application
# This example demonstrates:
# 1. A test application that generates memory pressure until OOM
# 2. A remediation policy that restarts pods based on OOM events
# 3. Instructions for testing and monitoring

# Test Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: error-test
  namespace: default
  labels:
    app: error-test
    test: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: error-test
  template:
    metadata:
      labels:
        app: error-test
    spec:
      containers:
      - name: memory-hog
        image: alpine:latest
        ports:
        - containerPort: 8080
        command: ["/bin/sh"]
        args:
          - -c
          - |
            # Create control file for memory pressure
            mkdir -p /tmp/control
            echo "0" > /tmp/control/start_oom

            while true; do
              # Check if we should start memory pressure
              START=$(cat /tmp/control/start_oom)
              
              if [ "$START" -eq "1" ]; then
                # Allocate memory in a loop until OOM
                python3 -c '
                x = []
                while True:
                    x.append(" " * 1024 * 1024)  # Allocate 1MB chunks
                '
              else
                sleep 1
              fi
            done
        resources:
          requests:
            cpu: 100m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        volumeMounts:
        - name: control
          mountPath: /tmp/control
      volumes:
      - name: control
        emptyDir: {}

---
# Service for accessing the test pod
apiVersion: v1
kind: Service
metadata:
  name: error-test
  namespace: default
spec:
  selector:
    app: error-test
  ports:
  - port: 80
    targetPort: 8080

---
# Remediation Policy for OOM-based pod restart
apiVersion: remediation.kubemedic.io/v1alpha1
kind: SelfRemediationPolicy
metadata:
  name: error-restart-policy
  namespace: default
spec:
  rules:
    - name: oom-kill
      conditions:
        - type: OOMKilled
          threshold: "1"     # Trigger on first OOM event
          duration: "1s"     # Immediate action
      actions:
        - type: RestartPod
          target:
            kind: Pod
            name: error-test
    - name: repeated-restarts
      conditions:
        - type: PodRestarts
          threshold: "3"     # If pod restarts more than 3 times
          duration: "5m"     # Within 5 minutes
      actions:
        - type: RollbackDeployment
          target:
            kind: Deployment
            name: error-test
  cooldownPeriod: "2m"    # Wait 2 minutes between restart actions

---
# Testing Instructions (in YAML comments)
#
# 1. Apply this example:
#    kubectl apply -f pod-restart-with-test.yaml
#
# 2. Wait for the pod to be ready:
#    kubectl wait --for=condition=ready pod -l app=error-test
#
# 3. Trigger memory pressure:
#    kubectl exec $(kubectl get pod -l app=error-test -o jsonpath='{.items[0].metadata.name}') \
#      -- /bin/sh -c 'echo "1" > /tmp/control/start_oom'
#
# 4. Monitor pod status:
#    kubectl get pods -l app=error-test -w
#
# 5. Check pod events for OOM:
#    kubectl describe pod -l app=error-test
#
# 6. Check remediation policy status:
#    kubectl get selfremediationpolicy error-restart-policy -o yaml
#
# 7. Clean up:
#    kubectl delete -f pod-restart-with-test.yaml